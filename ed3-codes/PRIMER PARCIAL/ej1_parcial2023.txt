/* Utilizando systick e interrupciones externas escribir un codigo en C que cuente indefinidamente
 * de 0 a 9. Un pulsador conectado a EINT0 reiniciara la cuenta a 0 y se mantendra en ese valor
 * mientras el pulsador se encuentre presionado. Un pulsador conectado a EINT1 permitira detener
 * o continuar la cuenta cada vez que sea presionado. Un pulsador conectado a EINT2 permitira modificar
 * la velocidad de incremento del contador. En este sentido cada vez que se presione ese pulsador el
 * contador pasara a incrementar su cuenta cada 1 segundo a cada 1 milisegundo y viceversa. Considerar
 * que el microcontrolador se encuentra con un cclk de 16MHz.
 *
 */

#include "LPC17xx.h"

void confGPIO(void);
void confEXTINT(void);
void confSYSTICK(void);

uint32_t display[10] 	= {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67};
uint32_t flag 			= 1; // 0 --> 1[ms], 1 --> 1[s], 2 --> stop/play
uint8_t  number			= 0; // Numero a mostrar por el display

int main(void)
{
	confGPIO();
	confEXTINT();
	confSYSTICK();

	while(1){}

	return 0;
}


void confGPIO(void)
{
	LPC_PINCON->PINSEL4		|=	(0x1<<20);		// P2.10 como EINT0. (01)
	LPC_PINCON->PINSEL4		|=	(0x1<<22);		// P2.11 como EINT1. (01)
	LPC_PINCON->PINSEL4		|=	(0x1<<24);		// P2.12 como EINT2. (01)

	LPC_PINCON->PINMODE4	|=	(0x3<<20);		// P2.10 con pull-down. (11)
	LPC_PINCON->PINMODE4	&=~	(0x2<<22);		// P2.11 con pull-up. (00)
	LPC_PINCON->PINMODE4	&=~	(0x2<<24);		// P2.12 con pull-up. (00)

	LPC_GPIO0->FIODIR 		|=	(0xFF<<0);		// P0[0:7] como output. (11111111)
	LPC_GPIO2->FIODIR 		&=~	(0x7<<0); 		// P2.[12:10] como input. (000)

	LPC_GPIO0->FIOMASK		=	(0xFFFFFF00); 	// Enmascaro los bits que no voy a usar.
}


void confEXTINT(void)
{
	LPC_SC->EXTMODE     	&=~	(0x1<<0); 		// EINT0 por nivel. (0)
	LPC_SC->EXTPOLAR    	|=	(0x1<<0); 		// EINT0 por nivel ALTO. (1)

	LPC_SC->EXTMODE     	|=	(0x1<<1); 		// EINT1 por flanco. (1)
	LPC_SC->EXTPOLAR    	|=	(0x1<<1); 		// EINT1 por flanco ALTO. (1)

	LPC_SC->EXTMODE     	|=	(0x1<<2); 		// EINT2 por flanco. (1)
	LPC_SC->EXTPOLAR    	|=	(0x1<<2); 		// EINT2 por flanco ALTO. (1)

	LPC_SC->EXTINT      	|=	(0x7<<0);		// Limpio las flags de interrupcion.

	NVIC_EnableIRQ(EINT0_IRQn);    				// Habilito las interrupciones externas.
	NVIC_EnableIRQ(EINT1_IRQn);
	NVIC_EnableIRQ(EINT2_IRQn);
}


void confSYSTICK(void)
{
	// Systick a 1 [ms]
	if (SysTick_Config(SystemCoreClock/100000))
		while (1); // Si hay un error en la carga del systick se queda aca.
}


void EINT0_IRQHandler(void)
{
	// Reinicio la cuenta, si se mantiene presionado se queda en ese valor.
	while(LPC_GPIO2->FIOPIN & 0x400){}

	number = 0;

	LPC_SC->EXTINT |= (0x1<<0);   			// Limpio la flag de interrupcion.
}


void EINT1_IRQHandler(void)
{
	// Pauso o continuo con la cuenta.
	if (flag == 2)
		flag = 0;
	else
		flag = 2;

	LPC_SC->EXTINT |= (0x1<<1);   			// Limpio la flag de interrupcion.
}


void EINT2_IRQHandler(void)
{
	// Modifico la velocidad del display entre 1[ms] y 1[s].
	if (flag == 1)
		flag = 0;
	else
		flag = 1;

	LPC_SC->EXTINT |= (0x1<<2);   			// Limpio la flag de interrupcion.
}


void SysTick_Handler(void)
{
	static uint8_t count = 0;				// Lleva el control de veces que interrumpio. 1000 veces = 1[s]

	if (flag == 0)
	{
		LPC_GPIO0->FIOPIN = display[number];
		number++;
	}
	else if (flag == 1 && count == 1000)
	{
		LPC_GPIO0->FIOPIN = display[number];
		count = 0;

		number++;
	}

	count++;
	if (number >= 10)
		number = 0;

	SysTick->CTRL &= SysTick->CTRL;			// Limpio la flag de interrupcion
}

