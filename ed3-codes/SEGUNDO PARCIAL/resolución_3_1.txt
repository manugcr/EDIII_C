/*
* Estudiante: Damián Marcelo González
* Carrera: Ingeniería en Computación
* Descripción: Modelo de parcial 2.pdf, ejercicio 2.
*
* Título de consigna: EJERCICIO N° 3: (25 %)
* Consigna: Considerando que se tiene un bloque de datos comprendidos entre las
* posiciones de memorias, dirección inicial= 0x10000800 a la dirección
* final= 0x10001000 ambas inclusive y se desea trasladar este bloque de datos
* una nueva zona de memoria comprendida entre la dirección inicial= 0x10002800 y
* la dirección Final=0x10003000 (en el mismo orden). Teniendo en cuenta además
* que los datos contenidos dentro de la zona de memoria son de 16 bits (AHB
* Master endianness configuration - por defecto) y que estos deben moverse de a
* uno (1) en cada evento de DMA, se sincronizará la transmisión con evento de
* match0 del timer1.
* Se pide que Enumere y explique los puntos a tener en cuenta para configurar
* correctamente el controlador DMA.
*
* Notas de las solución: El Match 0 del Timer 1, corresponde a un DMACBREQ = 10.
*/

/* macros */
#define BUFFER_SIZE         ((2050))


/* libs included */
#include "LPC17xx.h"
#include "lpc17xx_timer.h"
#include "lpc17xx_gpdma.h"


/* func declarations */
void config_timer_1(void);
void config_gpdma(void);


/* global variables */



/* func definitions */
int main(void) {

  config_timer_1();
  config_gpdma();
  while(1);

  return 0;
}


void config_timer_1(void) {
  // initialization
  TIM_TIMERCFG_Type timer_cfg;
  timer_cfg.PrescaleOption = TIM_PRESCALE_TICKVAL;
  timer_cfg.PrescaleValue = 0;
  TIM_Init(LPC_TIM1, TIM_TIMER_MODE, &timer_cfg);
  // set match data
  TIM_MATCHCFG_Type match_cfg;
  match_cfg.MatchChannel = 0;
  match_cfg.IntOnMatch = DISABLE;
  match_cfg.StopOnMatch = DISABLE;
  match_cfg.ResetOnMatch = ENABLE;
  match_cfg.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
  // random value not too low (so as to give time to the GPDMA to config)
  match_cfg.MatchValue = 1000000;
  TIM_ConfigMatch(LPC_TIM1, &match_cfg);
}


void config_gpdma(void) {
  // initialize GPDMA
  GPDMA_Init();
  // set up linked list
  GPDMA_LLI_Type lli;
  lli.SrcAddr = 0x10000800;
  lli.DstAddr = 0x10002800;
  lli.NextLLI = 0;
  lli.Control = BUFFER_SIZE |
                (0b001<<18) | // source transfer width: 16-bit
                (0b001<<21) | // dest transfer width: 16-bit
                (0b1<<26)   | // source increment enabled per packet transfered
                (0b1<<27);    // dest increment enabled per packet transfered
  // set up GPDMA
  GPDMA_Channel_CFG_Type gpdma;
  gpdma.ChannelNum = 0;
  gpdma.TransferSize = BUFFER_SIZE;
  gpdma.DstMemAddr = 0x10002800;
  gpdma.TransferType = GPDMA_TRANSFERTYPE_P2M;
  gpdma.SrcConn = GPDMA_CONN_MAT1_0;
  gpdma.DMALLI = (uint32_t)&lli;
  GPDMA_Setup(&gpdma);
  // enable channel 0
  GPDMA_ChannelCmd(0, ENABLE);
}
